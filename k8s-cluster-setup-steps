										######## kube-cluster setup ########

####### steps for both worker and master nodes ########

1. update ipaddress and hostnames of both master and worker as below

$ sudo vim /etc/hosts

52.87.241.17 kube-master
34.230.40.192 kube-worker

2. set hostnames on the nodes as below:

$ sudo hostnamectl set-hostname "kube-master"   -- on the master nodes
$ sudo hostnamectl set-hostname "kube-worker"   -- on the worker nodes

3. update the firewall rules and allow ports

   Master Nodes:
   
   * 10250 - kubelet
   * 10257 - kube-controller-manager
   * 10259 - kube-scheduler
   * 2379-2380 - ETCD
   * 6443 - kube-API server
   
   Worker-nodes:
   
   * 10250 - kubelet
   * 10256 - kube-proxy
   * 30000-32767 - NodePort-services
   
4. Turn-off the swap memory

$ sudo swapoff -a
$ sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

5. Install docker engine

$ sudo apt-get update
$ sudo apt-get install ca-certificates curl
$ sudo install -m 0755 -d /etc/apt/keyrings
$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
$ sudo chmod a+r /etc/apt/keyrings/docker.asc

$ echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
$ sudo apt-get update 
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
$ systemctl status docker

6. install kubectl kubeadm and kubelet

$ sudo apt-get update
$ sudo apt-get install -y apt-transport-https ca-certificates curl
$ sudo mkdir -p -m 755 /etc/apt/keyrings
$ curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
$ sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
$ echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
$ sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
$ sudo apt-get update
$ sudo apt-get install -y kubectl kubeadm kubelet
$ sudo apt-mark hold kubelet kubeadm kubectl


7. Install cri-dockerd as a container adaprter for docker engine 

$ git clone https://github.com/Mirantis/cri-dockerd.git
$ wget https://go.dev/dl/go1.20.linux-amd64.tar.gz
$ sudo tar -C /usr/local -xsf go1.20.linux-amd64.tar.gz
$ echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile
$ source ~/.profile
$ cd cri-dockerd
$ mkdir bin
$ go build -o bin/cri-dockerd
$ mkdir -p /usr/local/bin
$ source ~/.profile
$ sudo install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
$ sudo cp -a packaging/systemd/* /etc/systemd/system
$ sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
$ sudo systemctl daemon-reload
$ sudo systemctl enable cri-docker.service
$ sudo systemctl enable --now cri-docker.socket
$ sudo systemctl status cri-docker.socket

8. Let IP tables see the traffic

# Command:

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
  
overlay 
  
br_netfilter
  
EOF

# commands:

sudo modprobe overlay
sudo modprobe br_netfilter

# Command:

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf

net.bridge.bridge-nf-call-iptables  = 1


net.bridge.bridge-nf-call-ip6tables = 1

net.ipv4.ip_forward                 = 1

EOF

sudo sysctl --system
# Commands:

$ lsmod | grep br_netfilter   
$ lsmod | grep overlay
$ sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

########## ON Master Node #################

$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
$ kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml
$ kubectl get pods -o wide -A


############ on Worker node ##############

$ sudo kubeadm join 172.31.86.151:6443 --token 1medlo.9dy22gs904qkalrr \
	--discovery-token-ca-cert-hash sha256:e457d78dc2dfcbf14db41b4b22b76673bb5e621b9801c5ed5bdb6fcc39f57dd8 --cri-socket=unix:///var/run/cri-dockerd.sock
	
	
	
	
################# trouble shooting commands #############

$ kubectl drain --ignore-daemonsets <node-name>       -- to drain node
$ kubectl uncordon <node-name>   -- to make active the drained node
$ kubectl delete node <node-name>  -- to remove from the existing cluster
$ kubeadm token list
$ kubeadm token --help




